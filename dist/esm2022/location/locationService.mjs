import { BaseLocationServices, parseUrl } from '@uirouter/core';
/** A `LocationServices` that delegates to the Angular LocationStrategy */
export class Ng2LocationServices extends BaseLocationServices {
    _locationStrategy;
    constructor(router, _locationStrategy, isBrowser) {
        super(router, isBrowser);
        this._locationStrategy = _locationStrategy;
        this._locationStrategy.onPopState((evt) => {
            if (evt.type !== 'hashchange') {
                this._listener(evt);
            }
        });
    }
    _get() {
        return this._locationStrategy.path(true).replace(this._locationStrategy.getBaseHref().replace(/\/$/, ''), '');
    }
    _set(state, title, url, replace) {
        const { path, search, hash } = parseUrl(url);
        const hashWithPrefix = hash ? '#' + hash : '';
        let urlPath = path;
        let urlParams = search;
        if (search) {
            urlParams += hashWithPrefix;
        }
        else {
            urlPath += hashWithPrefix;
        }
        if (replace) {
            this._locationStrategy.replaceState(state, title, urlPath, urlParams);
        }
        else {
            this._locationStrategy.pushState(state, title, urlPath, urlParams);
        }
    }
    dispose(router) {
        super.dispose(router);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYXRpb25TZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xvY2F0aW9uL2xvY2F0aW9uU2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsUUFBUSxFQUFZLE1BQU0sZ0JBQWdCLENBQUM7QUFHMUUsMEVBQTBFO0FBQzFFLE1BQU0sT0FBTyxtQkFBb0IsU0FBUSxvQkFBb0I7SUFDckI7SUFBdEMsWUFBWSxNQUFnQixFQUFVLGlCQUFtQyxFQUFFLFNBQWtCO1FBQzNGLEtBQUssQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFEVyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQWtCO1FBR3ZFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUN4QyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEtBQUssWUFBWSxFQUFFLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEIsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELElBQUk7UUFDRixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2hILENBQUM7SUFFRCxJQUFJLENBQUMsS0FBVSxFQUFFLEtBQWEsRUFBRSxHQUFXLEVBQUUsT0FBZ0I7UUFDM0QsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTdDLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQzlDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUM7UUFFdkIsSUFBSSxNQUFNLEVBQUUsQ0FBQztZQUNYLFNBQVMsSUFBSSxjQUFjLENBQUM7UUFDOUIsQ0FBQzthQUFNLENBQUM7WUFDTixPQUFPLElBQUksY0FBYyxDQUFDO1FBQzVCLENBQUM7UUFFRCxJQUFJLE9BQU8sRUFBRSxDQUFDO1lBQ1osSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN4RSxDQUFDO2FBQU0sQ0FBQztZQUNOLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDckUsQ0FBQztJQUNILENBQUM7SUFFRCxPQUFPLENBQUMsTUFBZ0I7UUFDdEIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlTG9jYXRpb25TZXJ2aWNlcywgcGFyc2VVcmwsIFVJUm91dGVyIH0gZnJvbSAnQHVpcm91dGVyL2NvcmUnO1xuaW1wb3J0IHsgTG9jYXRpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbi8qKiBBIGBMb2NhdGlvblNlcnZpY2VzYCB0aGF0IGRlbGVnYXRlcyB0byB0aGUgQW5ndWxhciBMb2NhdGlvblN0cmF0ZWd5ICovXG5leHBvcnQgY2xhc3MgTmcyTG9jYXRpb25TZXJ2aWNlcyBleHRlbmRzIEJhc2VMb2NhdGlvblNlcnZpY2VzIHtcbiAgY29uc3RydWN0b3Iocm91dGVyOiBVSVJvdXRlciwgcHJpdmF0ZSBfbG9jYXRpb25TdHJhdGVneTogTG9jYXRpb25TdHJhdGVneSwgaXNCcm93c2VyOiBib29sZWFuKSB7XG4gICAgc3VwZXIocm91dGVyLCBpc0Jyb3dzZXIpO1xuXG4gICAgdGhpcy5fbG9jYXRpb25TdHJhdGVneS5vblBvcFN0YXRlKChldnQpID0+IHtcbiAgICAgIGlmIChldnQudHlwZSAhPT0gJ2hhc2hjaGFuZ2UnKSB7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyKGV2dCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBfZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLl9sb2NhdGlvblN0cmF0ZWd5LnBhdGgodHJ1ZSkucmVwbGFjZSh0aGlzLl9sb2NhdGlvblN0cmF0ZWd5LmdldEJhc2VIcmVmKCkucmVwbGFjZSgvXFwvJC8sICcnKSwgJycpO1xuICB9XG5cbiAgX3NldChzdGF0ZTogYW55LCB0aXRsZTogc3RyaW5nLCB1cmw6IHN0cmluZywgcmVwbGFjZTogYm9vbGVhbik6IGFueSB7XG4gICAgY29uc3QgeyBwYXRoLCBzZWFyY2gsIGhhc2ggfSA9IHBhcnNlVXJsKHVybCk7XG5cbiAgICBjb25zdCBoYXNoV2l0aFByZWZpeCA9IGhhc2ggPyAnIycgKyBoYXNoIDogJyc7XG4gICAgbGV0IHVybFBhdGggPSBwYXRoO1xuICAgIGxldCB1cmxQYXJhbXMgPSBzZWFyY2g7XG5cbiAgICBpZiAoc2VhcmNoKSB7XG4gICAgICB1cmxQYXJhbXMgKz0gaGFzaFdpdGhQcmVmaXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVybFBhdGggKz0gaGFzaFdpdGhQcmVmaXg7XG4gICAgfVxuXG4gICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgIHRoaXMuX2xvY2F0aW9uU3RyYXRlZ3kucmVwbGFjZVN0YXRlKHN0YXRlLCB0aXRsZSwgdXJsUGF0aCwgdXJsUGFyYW1zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbG9jYXRpb25TdHJhdGVneS5wdXNoU3RhdGUoc3RhdGUsIHRpdGxlLCB1cmxQYXRoLCB1cmxQYXJhbXMpO1xuICAgIH1cbiAgfVxuXG4gIGRpc3Bvc2Uocm91dGVyOiBVSVJvdXRlcikge1xuICAgIHN1cGVyLmRpc3Bvc2Uocm91dGVyKTtcbiAgfVxufVxuIl19