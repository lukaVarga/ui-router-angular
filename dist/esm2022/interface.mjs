export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJmYWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2ludGVyZmFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhdGVEZWNsYXJhdGlvbiwgX1ZpZXdEZWNsYXJhdGlvbiwgVHJhbnNpdGlvbiwgSG9va1Jlc3VsdCB9IGZyb20gJ0B1aXJvdXRlci9jb3JlJztcbmltcG9ydCB7IENvbXBvbmVudCwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTW9kdWxlVHlwZUNhbGxiYWNrIH0gZnJvbSAnLi9sYXp5TG9hZC9sYXp5TG9hZE5nTW9kdWxlJztcblxuLyoqXG4gKiBUaGUgU3RhdGVEZWNsYXJhdGlvbiBvYmplY3QgaXMgdXNlZCB0byBkZWZpbmUgYSBzdGF0ZSBvciBuZXN0ZWQgc3RhdGUuXG4gKiBJdCBzaG91bGQgYmUgcmVnaXN0ZXJlZCB3aXRoIHRoZSBbW1N0YXRlUmVnaXN0cnldXS5cbiAqXG4gKiAjIyMjIEV4YW1wbGU6XG4gKiBgYGBqc1xuICogaW1wb3J0IHtGb2xkZXJzQ29tcG9uZW50fSBmcm9tIFwiLi9mb2xkZXJzXCI7XG4gKlxuICogZXhwb3J0IGZ1bmN0aW9uIGdldEFsbEZvbGRlcnMoRm9sZGVyU2VydmljZSkge1xuICogICByZXR1cm4gRm9sZGVyU2VydmljZS5saXN0KCk7XG4gKiB9XG4gKlxuICogLy8gU3RhdGVEZWNsYXJhdGlvbiBvYmplY3RcbiAqIGV4cG9ydCBsZXQgZm9sZGVyc1N0YXRlID0ge1xuICogICBuYW1lOiAnZm9sZGVycycsXG4gKiAgIHVybDogJy9mb2xkZXJzJyxcbiAqICAgY29tcG9uZW50OiBGb2xkZXJzQ29tcG9uZW50LFxuICogICByZXNvbHZlOiBbXG4gKiAgICAgeyB0b2tlbjogJ2FsbGZvbGRlcnMnLCBkZXBzOiBbRm9sZGVyU2VydmljZV0sIHJlc29sdmVGbjogZ2V0QWxsRm9sZGVycyB9XG4gKiAgIF1cbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5nMlN0YXRlRGVjbGFyYXRpb24gZXh0ZW5kcyBTdGF0ZURlY2xhcmF0aW9uLCBOZzJWaWV3RGVjbGFyYXRpb24ge1xuICAvKipcbiAgICogQW4gb3B0aW9uYWwgb2JqZWN0IHVzZWQgdG8gZGVmaW5lIG11bHRpcGxlIG5hbWVkIHZpZXdzLlxuICAgKlxuICAgKiBFYWNoIGtleSBpcyB0aGUgbmFtZSBvZiBhIHZpZXcsIGFuZCBlYWNoIHZhbHVlIGlzIGEgW1tOZzJWaWV3RGVjbGFyYXRpb25dXS5cbiAgICogVW5uYW1lZCB2aWV3cyBhcmUgaW50ZXJuYWxseSByZW5hbWVkIHRvIGAkZGVmYXVsdGAuXG4gICAqXG4gICAqIEEgdmlldydzIG5hbWUgaXMgdXNlZCB0byBtYXRjaCBhbiBhY3RpdmUgYDx1aS12aWV3PmAgZGlyZWN0aXZlIGluIHRoZSBET00uICBXaGVuIHRoZSBzdGF0ZVxuICAgKiBpcyBlbnRlcmVkLCB0aGUgc3RhdGUncyB2aWV3cyBhcmUgYWN0aXZhdGVkIGFuZCB0aGVuIG1hdGNoZWQgd2l0aCBhY3RpdmUgYDx1aS12aWV3PmAgZGlyZWN0aXZlczpcbiAgICpcbiAgICogLSBUaGUgdmlldydzIG5hbWUgaXMgcHJvY2Vzc2VkIGludG8gYSB1aS12aWV3IHRhcmdldDpcbiAgICogICAtIHVpLXZpZXcgYWRkcmVzczogYW4gYWRkcmVzcyB0byBhIHVpLXZpZXdcbiAgICogICAtIHN0YXRlIGFuY2hvcjogdGhlIHN0YXRlIHRvIGFuY2hvciB0aGUgYWRkcmVzcyB0b1xuICAgKlxuICAgKiAgRXhhbXBsZXM6XG4gICAqXG4gICAqICBUYXJnZXRzIHRocmVlIG5hbWVkIHVpLXZpZXdzIGluIHRoZSBwYXJlbnQgc3RhdGUncyB0ZW1wbGF0ZVxuICAgKlxuICAgKiAjIyMjIEV4YW1wbGU6XG4gICAqIGBgYGpzXG4gICAqIHZpZXdzOiB7XG4gICAqICAgaGVhZGVyOiB7Y29tcG9uZW50OiBIZWFkZXJDb21wb25lbnR9LFxuICAgKiAgIGJvZHk6IHtjb21wb25lbnQ6IEJvZHlDb21wb25lbnR9LFxuICAgKiAgIGZvb3Rlcjoge2NvbXBvbmVudDogRm9vdGVyQ29tcG9uZW50fVxuICAgKiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiAjIyMjIEV4YW1wbGU6XG4gICAqIGBgYGpzXG4gICAqIC8vIFRhcmdldHMgbmFtZWQgdWktdmlldz1cImhlYWRlclwiIGluIHRoZSB0ZW1wbGF0ZSBvZiB0aGUgYW5jZXN0b3Igc3RhdGUgJ3RvcCdcbiAgICogLy8gYW5kIHRoZSBuYW1lZCBgdWktdmlldz1cImJvZHlcIiBmcm9tIHRoZSBwYXJlbnQgc3RhdGUncyB0ZW1wbGF0ZS5cbiAgICogdmlld3M6IHtcbiAgICogICAnaGVhZGVyQHRvcCc6IHtjb21wb25lbnQ6IE1zZ0hlYWRlckNvbXBvbmVudH0sXG4gICAqICAgJ2JvZHknOiB7Y29tcG9uZW50OiBNZXNzYWdlc0NvbXBvbmVudH1cbiAgICogfVxuICAgKiBgYGBcbiAgICpcbiAgICogIyMgVmlldyB0YXJnZXRpbmcgZGV0YWlsc1xuICAgKlxuICAgKiBUaGVyZSBhcmUgYSBmZXcgc3R5bGVzIG9mIHZpZXcgYWRkcmVzc2luZy90YXJnZXRpbmcuICBUaGUgbW9zdCBjb21tb24gaXMgYSBzaW1wbGUgYHVpLXZpZXdgIG5hbWVcbiAgICpcbiAgICpcbiAgICogIyMjIyBTaW1wbGUgdWktdmlldyBuYW1lXG4gICAqXG4gICAqIEFkZHJlc3NlcyB3aXRob3V0IGFuIGBAYCBhcmUgYW5jaG9yZWQgdG8gdGhlIHBhcmVudCBzdGF0ZS5cbiAgICpcbiAgICogIyMjIyBFeGFtcGxlOlxuICAgKiBgYGBqc1xuICAgKiAvLyB0YXJnZXQgdGhlIGA8ZGl2IHVpLXZpZXc9J2Zvbyc+PC9kaXY+YCBjcmVhdGVkIGluIHRoZSBwYXJlbnQgc3RhdGUncyB2aWV3XG4gICAqIHZpZXdzOiB7IGZvbzogey4uLn0gfVxuICAgKiBgYGBcbiAgICpcbiAgICogIyMjIyBWaWV3IG5hbWUgYW5jaG9yZWQgdG8gYSBzdGF0ZVxuICAgKlxuICAgKiBZb3UgY2FuIGFuY2hvciB0aGUgYHVpLXZpZXdgIG5hbWUgdG8gYSBzcGVjaWZpYyBzdGF0ZSBieSBpbmNsdWRpbmcgYW4gYEBgXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIGBgYGpzXG4gICAqXG4gICAqIC8vIHRhcmdldCB0aGUgYDxkaXYgdWktdmlldz0nZm9vJz48L2Rpdj5gIHdoaWNoIHdhcyBjcmVhdGVkIGluIGFcbiAgICogLy8gdmlldyBvd25lZCBieSB0aGUgc3RhdGUgYGJhci5iYXpgXG4gICAqIHZpZXdzOiB7ICdmb29AYmFyLmJheic6IHsuLi59IH1cbiAgICogYGBgXG4gICAqXG4gICAqICMjIyMgQWJzb2x1dGUgYWRkcmVzc2luZ1xuICAgKlxuICAgKiBZb3UgY2FuIGFkZHJlc3MgYSBgdWktdmlld2AgYWJzb2x1dGVseSwgdXNpbmcgZG90dGVkIG5vdGF0aW9uLCBieSBwcmVmaXhpbmcgdGhlIGFkZHJlc3Mgd2l0aCBhIGAhYC4gIERvdHRlZFxuICAgKiBhZGRyZXNzZXMgbWFwIHRvIHRoZSBoaWVyYXJjaHkgb2YgYHVpLXZpZXdgcyBhY3RpdmUgaW4gdGhlIERPTTpcbiAgICpcbiAgICogIyMjIyBFeGFtcGxlOlxuICAgKiBgYGBqc1xuICAgKiAvLyBhYnNvbHV0ZWx5IHRhcmdldCB0aGUgYDxkaXYgdWktdmlldz0nbmVzdGVkJz48L2Rpdj5gLi4uIHdoaWNoIHdhcyBjcmVhdGVkXG4gICAqIC8vIGluIHRoZSB1bm5hbWVkLyRkZWZhdWx0IHJvb3QgYDx1aS12aWV3PjwvdWktdmlldz5gXG4gICAqIHZpZXdzOiB7ICchJGRlZmF1bHQubmVzdGVkJzogey4uLn0gfVxuICAgKiBgYGBcbiAgICpcbiAgICogIyMjIyBSZWxhdGl2ZSBhZGRyZXNzaW5nXG4gICAqXG4gICAqIEFic29sdXRlIGFkZHJlc3NpbmcgaXMgYWN0dWFsbHkgcmVsYXRpdmUgYWRkcmVzc2luZywgb25seSBhbmNob3JlZCB0byB0aGUgdW5uYW1lZCByb290IHN0YXRlLiAgWW91IGNhbiBhbHNvIHVzZVxuICAgKiByZWxhdGl2ZSBhZGRyZXNzaW5nIGFuY2hvcmVkIHRvIGFueSBzdGF0ZSwgaW4gb3JkZXIgdG8gdGFyZ2V0IGEgdGFyZ2V0IGRlZXBseSBuZXN0ZWQgYHVpLXZpZXdzYDpcbiAgICpcbiAgICogIyMjIyBFeGFtcGxlOlxuICAgKiBgYGBqc1xuICAgKlxuICAgKiAvLyB0YXJnZXQgdGhlIGA8ZGl2IHVpLXZpZXc9J2Jhcic+PC9kaXY+YC4uLiB3aGljaCB3YXMgY3JlYXRlZCBpbnNpZGUgdGhlXG4gICAqIC8vIGA8ZGl2IHVpLXZpZXc9J2Jhcic+PC9kaXY+YC4uLiB3aGljaCB3YXMgY3JlYXRlZCBpbnNpZGUgdGhlIHBhcmVudCBzdGF0ZSdzIHRlbXBsYXRlLlxuICAgKiB2aWV3czogeyAnZm9vLmJhcic6IHsuLi59IH1cbiAgICogYGBgXG4gICAqXG4gICAqICMjIyMgRXhhbXBsZTpcbiAgICogYGBganNcbiAgICogLy8gdGFyZ2V0IHRoZSBgPGRpdiB1aS12aWV3PSdiYXInPjwvZGl2PmAuLi4gIHdoaWNoIHdhcyBjcmVhdGVkIGluXG4gICAqIC8vIGA8ZGl2IHVpLXZpZXc9J2Zvbyc+PC9kaXY+YC4uLiB3aGljaCB3YXMgY3JlYXRlZCBpbiBhIHRlbXBsYXRlIGNyb20gdGhlIHN0YXRlIGBiYXoucXV4YFxuICAgKiB2aWV3czogeyAnZm9vLmJhckBiYXoucXV4Jzogey4uLn0gfVxuICAgKlxuICAgKiAtLS1cbiAgICpcbiAgICogIyMgU3RhdGUgYGNvbXBvbmVudDpgIGFuZCBgdmlld3M6YCBpbmNvbXBhdGlibGl0eVxuICAgKlxuICAgKiBJZiBhIHN0YXRlIGhhcyBhIGB2aWV3c2Agb2JqZWN0LCB0aGUgc3RhdGUtbGV2ZWwgYGNvbXBvbmVudDpgIHByb3BlcnR5IGlzIGlnbm9yZWQuICBUaGVyZWZvcmUsXG4gICAqIGlmIF9hbnkgdmlld18gZm9yIGEgc3RhdGUgaXMgZGVjbGFyZWQgaW4gdGhlIGB2aWV3c2Agb2JqZWN0LCB0aGVuIF9hbGwgb2YgdGhlIHN0YXRlJ3Mgdmlld3NfIG11c3QgYmUgZGVmaW5lZCBpblxuICAgKiB0aGUgYHZpZXdzYCBvYmplY3QuXG4gICAqL1xuICB2aWV3cz86IHsgW2tleTogc3RyaW5nXTogTmcyVmlld0RlY2xhcmF0aW9uIH07XG5cbiAgLyoqXG4gICAqIEEgZnVuY3Rpb24gdXNlZCB0byBsYXp5IGxvYWQgYW4gYE5nTW9kdWxlYFxuICAgKlxuICAgKiBUaGUgYGxvYWRDaGlsZHJlbmAgcHJvcGVydHkgc2hvdWxkIGJlIGFkZGVkIHRvIGEgRnV0dXJlIFN0YXRlIChhIGxhenkgbG9hZGVkIHN0YXRlIHdob3NlIG5hbWUgZW5kcyBpbiBgLioqYCkuXG4gICAqIFRoZSBGdXR1cmUgU3RhdGUgaXMgYSBwbGFjZWhvbGRlciBmb3IgYSB0cmVlIG9mIHN0YXRlcyB0aGF0IHdpbGwgYmUgbGF6eSBsb2FkZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogV2hlbiB0aGUgZnV0dXJlIHN0YXRlIGlzIGFjdGl2YXRlZCwgdGhlIGBsb2FkQ2hpbGRyZW5gIHByb3BlcnR5IHNob3VsZCBsYXp5IGxvYWQgYW4gYE5nTW9kdWxlYFxuICAgKiB3aGljaCBjb250YWlucyB0aGUgZnVsbHkgbG9hZGVkIHN0YXRlcy5cbiAgICogVGhlIGBOZ01vZHVsZWAgc2hvdWxkIGNvbnRhaW4gdGhlIGZ1bGx5IGxvYWRlZCBzdGF0ZXMgd2hpY2ggd2lsbCBiZSByZWdpc3RlcmVkLlxuICAgKiBUaGUgZnVsbHkgbG9hZGVkIHN0YXRlcyB3aWxsIHJlcGxhY2UgdGhlIHRlbXBvcmFyeSBmdXR1cmUgc3RhdGVzIG9uY2UgbGF6eSBsb2FkaW5nIGlzIGNvbXBsZXRlLlxuICAgKlxuICAgKiAjIyMjIEV4YW1wbGU6XG4gICAqIGBgYGpzXG4gICAqIHZhciBmdXR1cmVTdGF0ZSA9IHtcbiAgICogICBuYW1lOiAnaG9tZS4qKicsXG4gICAqICAgdXJsOiAnL2hvbWUnLFxuICAgKiAgIGxvYWRDaGlsZHJlbjogKCkgPT4gaW1wb3J0KCcuL2hvbWUvaG9tZS5tb2R1bGUnKVxuICAgKiAgICAgICAudGhlbihyZXN1bHQgPT4gcmVzdWx0LkhvbWVNb2R1bGUpO1xuICAgKiB9XG4gICAqIGBgYFxuICAgKi9cbiAgbG9hZENoaWxkcmVuPzogTW9kdWxlVHlwZUNhbGxiYWNrO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5nMlZpZXdEZWNsYXJhdGlvbiBleHRlbmRzIF9WaWV3RGVjbGFyYXRpb24ge1xuICAvKipcbiAgICogVGhlIGBDb21wb25lbnRgIGNsYXNzIHRvIHVzZSBmb3IgdGhpcyB2aWV3LlxuICAgKlxuICAgKiBBIHByb3BlcnR5IG9mIFtbTmcyU3RhdGVEZWNsYXJhdGlvbl1dIG9yIFtbTmcyVmlld0RlY2xhcmF0aW9uXV06XG4gICAqXG4gICAqICMjIyBUaGUgY29tcG9uZW50IGNsYXNzIHdoaWNoIHdpbGwgYmUgdXNlZCBmb3IgdGhpcyB2aWV3LlxuICAgKlxuICAgKiAjIyMjIEV4YW1wbGU6XG4gICAqIGBgYGpzXG4gICAqIC5zdGF0ZSgncHJvZmlsZScsIHtcbiAgICogICAvLyBVc2UgdGhlIDxteS1wcm9maWxlPjwvbXktcHJvZmlsZT4gY29tcG9uZW50IGZvciB0aGUgVW5uYW1lZCB2aWV3XG4gICAqICAgY29tcG9uZW50OiBNeVByb2ZpbGVDb21wb25lbnQsXG4gICAqIH1cbiAgICpcbiAgICogLnN0YXRlKCdtZXNzYWdlcycsIHtcbiAgICogICAvLyB1c2UgdGhlIDxuYXYtYmFyPjwvbmF2LWJhcj4gY29tcG9uZW50IGZvciB0aGUgdmlldyBuYW1lZCAnaGVhZGVyJ1xuICAgKiAgIC8vIHVzZSB0aGUgPG1lc3NhZ2UtbGlzdD48L21lc3NhZ2UtbGlzdD4gY29tcG9uZW50IGZvciB0aGUgdmlldyBuYW1lZCAnY29udGVudCdcbiAgICogICB2aWV3czoge1xuICAgKiAgICAgaGVhZGVyOiB7IGNvbXBvbmVudDogTmF2QmFyIH0sXG4gICAqICAgICBjb250ZW50OiB7IGNvbXBvbmVudDogTWVzc2FnZUxpc3QgfVxuICAgKiAgIH1cbiAgICogfVxuICAgKlxuICAgKiAvLyBOYW1lZCB2aWV3cyBzaG9ydGhhbmQ6XG4gICAqIC8vIEluc2lkZSBhIFwidmlld3M6XCIgYmxvY2ssIGEgQ29tcG9uZW50IGNsYXNzIChOYXZCYXIpIGlzIHNob3J0aGFuZCBmb3IgeyBjb21wb25lbnQ6IE5hdkJhciB9XG4gICAqIC5zdGF0ZSgnY29udGFjdHMnLCB7XG4gICAqICAgLy8gdXNlIHRoZSA8bmF2LWJhcj48L25hdi1iYXI+IGNvbXBvbmVudCBmb3IgdGhlIHZpZXcgbmFtZWQgJ2hlYWRlcidcbiAgICogICAvLyB1c2UgdGhlIDxjb250YWN0LWxpc3Q+PC9jb250YWN0LWxpc3Q+IGNvbXBvbmVudCBmb3IgdGhlIHZpZXcgbmFtZWQgJ2NvbnRlbnQnXG4gICAqICAgdmlld3M6IHtcbiAgICogICAgIGhlYWRlcjogTmF2QmFyLFxuICAgKiAgICAgY29udGVudDogQ29udGFjdExpc3RcbiAgICogICB9XG4gICAqIH1cbiAgICogYGBgXG4gICAqXG4gICAqICMjIyBBY2Nlc3NpbmcgUmVzb2x2ZSBEYXRhXG4gICAqXG4gICAqIFRoZSBjb21wb25lbnQgY2FuIGFjY2VzcyB0aGUgVHJhbnNpdGlvbidzIFtbTmcyU3RhdGVEZWNsYXJhdGlvbi5yZXNvbHZlXV0gZGF0YSBpbiBvbmUgb2YgdHdvIHdheXM6XG4gICAqXG4gICAqIDEpIFVzaW5nIERlcGVuZGVuY3kgSW5qZWN0aW9uIGluIHRoZSBjb21wb25lbnQgY29uc3RydWN0b3JcbiAgICpcbiAgICogKHVzaW5nIFR5cGVzY3JpcHQpXG4gICAqIGBgYGpzXG4gICAqIGNsYXNzIE15Q29tcG9uZW50IHtcbiAgICogICBjb25zdHJ1Y3RvcihASW5qZWN0KFwibXlSZXNvbHZlRGF0YVwiKSBwdWJsaWMgcmVzb2x2ZVZhbHVlQSwgcmVzb2x2ZVZhbHVlQjogcHVibGljIFNvbWVDbGFzcykge1xuICAgKiAgIH1cbiAgICogfVxuICAgKiBgYGBcbiAgICpcbiAgICogKHVzaW5nIEVTNi83L2JhYmVsKVxuICAgKiBgYGBqc1xuICAgKiBjbGFzcyBNeUNvbXBvbmVudCB7XG4gICAqICAgc3RhdGljIGdldCBwYXJhbWV0ZXJzKCkge1xuICAgKiAgICAgcmV0dXJuIFtbXCJteVJlc29sdmVEYXRhXCJdLCBbTXlSZXNvbHZlQ2xhc3NdXTtcbiAgICogICB9XG4gICAqICAgY29uc3RydWN0b3IocmVzb2x2ZVZhbHVlQSwgcmVzb2x2ZVZhbHVlQikge1xuICAgKiAgICAgdGhpcy5yZXNvbHZlVmFsdWVBID0gcmVzb2x2ZVZhbHVlQTtcbiAgICogICAgIHRoaXMucmVzb2x2ZVZhbHVlQiA9IHJlc29sdmVWYWx1ZUI7XG4gICAqICAgfVxuICAgKiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBTZWUgYWxzbzogaHR0cHM6Ly9naXRodWIuY29tL3NodWhlaS9iYWJlbC1wbHVnaW4tYW5ndWxhcjItYW5ub3RhdGlvbnNcbiAgICpcbiAgICogMikgVXNpbmcgYSBjb21wb25lbnQgaW5wdXRcbiAgICpcbiAgICogTm90ZTogVG8gYmluZCBhIHJlc29sdmUgdG8gYSBjb21wb25lbnQgaW5wdXQsIHRoZSByZXNvbHZlcyBtdXN0IGBwcm92aWRlOmAgYSBzdHJpbmcgdmFsdWVcbiAgICpcbiAgICogYGBganNcbiAgICogQENvbXBvbmVudCgpIHtcbiAgICogICBpbnB1dHM6IFsncmVzb2x2ZVZhbHVlQSddXG4gICAqIH1cbiAgICogY2xhc3MgTXlDb21wb25lbnQge1xuICAgKiAgIG15UmVzb2x2ZVZhbHVlQTtcbiAgICogICBASW5wdXQoKSByZXNvbHZlVmFsdWVCO1xuICAgKiAgIEBJbnB1dChcInJlc29sdmVWYWx1ZUNcIikgcmVzb2x2ZVZhbHVlQztcbiAgICpcbiAgICogICBjb25zdHJ1Y3RvcigpIHtcbiAgICogICB9XG4gICAqIH1cbiAgICogYGBgXG4gICAqL1xuICBjb21wb25lbnQ/OiBUeXBlPGFueT47XG5cbiAgLyoqXG4gICAqIEFuIG9iamVjdCB3aGljaCBtYXBzIGByZXNvbHZlYCBrZXlzIHRvIFtbY29tcG9uZW50XV0gYGJpbmRpbmdzYC5cbiAgICpcbiAgICogQSBwcm9wZXJ0eSBvZiBbW05nMlN0YXRlRGVjbGFyYXRpb25dXSBvciBbW05nMlZpZXdEZWNsYXJhdGlvbl1dOlxuICAgKlxuICAgKiBXaGVuIHVzaW5nIGEgW1tjb21wb25lbnRdXSBkZWNsYXJhdGlvbiAoYGNvbXBvbmVudDogTXlDb21wb25lbnRgKSwgZWFjaCBpbnB1dCBiaW5kaW5nIGZvciB0aGUgY29tcG9uZW50IGlzIHN1cHBsaWVkXG4gICAqIGRhdGEgZnJvbSBhIHJlc29sdmUgb2YgdGhlIHNhbWUgbmFtZSwgYnkgZGVmYXVsdC4gIFlvdSBtYXkgc3VwcGx5IGRhdGEgZnJvbSBhIGRpZmZlcmVudCByZXNvbHZlIG5hbWUgYnkgbWFwcGluZyBpdCBoZXJlLlxuICAgKiBUaGlzIG1pZ2h0IGJlIHVzZWZ1bCBpZiB5b3Ugd2FudCB0byByZXVzZSB0aGUgc2FtZSByZXNvbHZlIHZhbHVlIHdpdGggdmFyaW91cyBjb21wb25lbnRzIHdpdGggZGlmZmVyZW50IGlucHV0IGJpbmRpbmcgbmFtZXMuXG4gICAqXG4gICAqIEVhY2gga2V5IGluIHRoaXMgb2JqZWN0IGlzIHRoZSBuYW1lIG9mIG9uZSBvZiB0aGUgY29tcG9uZW50J3MgaW5wdXQgYmluZGluZ3MuXG4gICAqIEVhY2ggdmFsdWUgaXMgdGhlIG5hbWUgb2YgdGhlIHJlc29sdmUgdGhhdCBzaG91bGQgYmUgcHJvdmlkZWQgdG8gdGhhdCBiaW5kaW5nLlxuICAgKlxuICAgKiBBbnkgY29tcG9uZW50IGJpbmRpbmdzIHRoYXQgYXJlIG9taXR0ZWQgZnJvbSB0aGlzIG1hcCBnZXQgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2YgbWFwcGluZyB0byBhIHJlc29sdmUgb2YgdGhlICogc2FtZSBuYW1lLlxuICAgKlxuICAgKiAjIyMjIEV4YW1wbGU6XG4gICAqIGBgYGpzXG4gICAqIGV4cG9ydCBjb25zdCBmb29TdGF0ZSA9IHtcbiAgICogICBuYW1lOiAnZm9vJyxcbiAgICogICBjb21wb25lbnQ6IE15Q29tcG9uZW50LFxuICAgKiAgIHJlc29sdmU6IFtcbiAgICogICAgIHsgdG9rZW46ICd1c2VycycsIGRlcHM6IFtVc2VyU2VydmljZV0sIHJlc29sdmVGbjogZ2V0VXNlcnMgfVxuICAgKiAgIF0sXG4gICAqICAgYmluZGluZ3M6IHtcbiAgICogICAgIHJlc29sdmVEYXRhOiAndXNlcnMnXG4gICAqICAgfVxuICAgKiB9XG4gICAqXG4gICAqIGV4cG9ydCBmdW5jdGlvbiBnZXRVc2Vycyh1c2Vyc2VydmljZSkge1xuICAgKiAgIHJldHVybiB1c2Vyc2VydmljZS5nZXRVc2VycygpO1xuICAgKiB9XG4gICAqXG4gICAqIEBDb21wb25lbnQoKSB7XG4gICAqIH1cbiAgICogY2xhc3MgTXlDb21wb25lbnQge1xuICAgKiAgIEBJbnB1dCgpIHJlc29sdmVEYXRhO1xuICAgKiAgIGNvbnN0cnVjdG9yKCkgeyB9XG4gICAqIH1cbiAgICogYGBgXG4gICAqXG4gICAqL1xuICBiaW5kaW5ncz86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVWlPblBhcmFtc0NoYW5nZWQge1xuICAvKipcbiAgICogQSBVSS1Sb3V0ZXIgdmlldyBoYXMgYW4gQW5ndWxhciBgQ29tcG9uZW50YCAoc2VlIFtbTmcyVmlld0RlY2xhcmF0aW9uLmNvbXBvbmVudF1dKS5cbiAgICogVGhlIGBDb21wb25lbnRgIG1heSBkZWZpbmUgY29tcG9uZW50LWxldmVsIGhvb2tzIHdoaWNoIFVJLVJvdXRlciB3aWxsIGNhbGwgYXQgdGhlIGFwcHJvcHJpYXRlIHRpbWVzLlxuICAgKiBUaGVzZSBjYWxsYmFja3MgYXJlIHNpbWlsYXIgdG8gVHJhbnNpdGlvbiBIb29rcyAoW1tJSG9va1JlZ2lzdHJ5XV0pLCBidXQgYXJlIG9ubHkgY2FsbGVkIGlmIHRoZSB2aWV3L2NvbXBvbmVudCBpcyBjdXJyZW50bHkgYWN0aXZlLlxuICAgKlxuICAgKiBUaGUgdWlPblBhcmFtc0NoYW5nZWQgY2FsbGJhY2sgaXMgY2FsbGVkIHdoZW4gcGFyYW1ldGVyIHZhbHVlcyBjaGFuZ2UuXG4gICAqXG4gICAqIFRoaXMgY2FsbGJhY2sgaXMgdXNlZCB0byByZXNwb25kIGR5bmFtaWMgcGFyYW1ldGVyIHZhbHVlcyBjaGFuZ2luZy5cbiAgICogSXQgaXMgY2FsbGVkIHdoZW4gYSB0cmFuc2l0aW9uIGNoYW5nZWQgb25lIG9yIG1vcmUgZHluYW1pYyBwYXJhbWV0ZXIgdmFsdWVzLFxuICAgKiBhbmQgdGhlIHJvdXRlZCBjb21wb25lbnQgd2FzIG5vdCBkZXN0cm95ZWQuXG4gICAqXG4gICAqIEl0IHJlY2VpdmVzIHR3byBwYXJhbWV0ZXJzOlxuICAgKlxuICAgKiAtIEFuIG9iamVjdCB3aXRoIChvbmx5KSBjaGFuZ2VkIHBhcmFtZXRlciB2YWx1ZXMuXG4gICAqICAgVGhlIGtleXMgYXJlIHRoZSBwYXJhbWV0ZXIgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBuZXcgcGFyYW1ldGVyIHZhbHVlcy5cbiAgICogLSBUaGUgW1tUcmFuc2l0aW9uXV0gd2hpY2ggY2hhbmdlZCB0aGUgcGFyYW1ldGVyIHZhbHVlcy5cbiAgICpcbiAgICogIyMjIyBFeGFtcGxlOlxuICAgKiBgYGBqc1xuICAgKiBAQ29tcG9uZW50KHtcbiAgICogICB0ZW1wbGF0ZTogJzxpbnB1dCB0eXBlPVwidGV4dFwiPidcbiAgICogfSlcbiAgICogY2xhc3MgTXlDb21wb25lbnQge1xuICAgKiAgIHVpT25QYXJhbXNDaGFuZ2VkKG5ld1BhcmFtczogeyBbcGFyYW1OYW1lOiBzdHJpbmddOiBhbnkgfSwgdHJhbnM6IFRyYW5zaXRpb24pIHtcbiAgICogICAgIE9iamVjdC5rZXlzKG5ld1BhcmFtcykuZm9yRWFjaChwYXJhbU5hbWUgPT4ge1xuICAgKiAgICAgICBjb25zb2xlLmxvZyhgJHtwYXJhbU5hbWV9IGNoYW5nZWQgdG8gJHtuZXdQYXJhbXNbcGFyYW1OYW1lXX1gKVxuICAgKiAgICAgfSk7XG4gICAqICAgfVxuICAgKiB9XG4gICAqIGBgYFxuICAgKi9cbiAgdWlPblBhcmFtc0NoYW5nZWQobmV3UGFyYW1zOiB7IFtwYXJhbU5hbWU6IHN0cmluZ106IGFueSB9LCB0cmFucz86IFRyYW5zaXRpb24pOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVpT25FeGl0IHtcbiAgLyoqXG4gICAqIEEgVUktUm91dGVyIHZpZXcgaGFzIGFuIEFuZ3VsYXIgYENvbXBvbmVudGAgKHNlZSBbW05nMlZpZXdEZWNsYXJhdGlvbi5jb21wb25lbnRdXSkuXG4gICAqIFRoZSBgQ29tcG9uZW50YCBtYXkgZGVmaW5lIGNvbXBvbmVudC1sZXZlbCBob29rcyB3aGljaCBVSS1Sb3V0ZXIgd2lsbCBjYWxsIGF0IHRoZSBhcHByb3ByaWF0ZSB0aW1lcy5cbiAgICogVGhlc2UgY2FsbGJhY2tzIGFyZSBzaW1pbGFyIHRvIFRyYW5zaXRpb24gSG9va3MgKFtbSUhvb2tSZWdpc3RyeV1dKSwgYnV0IGFyZSBvbmx5IGNhbGxlZCBpZiB0aGUgdmlldy9jb21wb25lbnQgaXMgY3VycmVudGx5IGFjdGl2ZS5cbiAgICpcbiAgICogVGhlIHVpQ2FuRXhpdCBjYWxsYmFjayBpcyBjYWxsZWQgd2hlbiB0aGUgcm91dGVkIGNvbXBvbmVudCdzIHN0YXRlIGlzIGFib3V0IHRvIGJlIGV4aXRlZC5cbiAgICpcbiAgICogVGhlIGNhbGxiYWNrIGNhbiBiZSB1c2VkIHRvIGNhbmNlbCBvciBhbHRlciB0aGUgbmV3IFRyYW5zaXRpb24gdGhhdCB3b3VsZCBvdGhlcndpc2UgZXhpdCB0aGUgY29tcG9uZW50J3Mgc3RhdGUuXG4gICAqXG4gICAqIFRoaXMgY2FsbGJhY2sgaXMgdXNlZCB0byBpbmZvcm0gYSB2aWV3IHRoYXQgaXQgaXMgYWJvdXQgdG8gYmUgZXhpdGVkLCBkdWUgdG8gYSBuZXcgW1tUcmFuc2l0aW9uXV0uXG4gICAqIFRoZSBjYWxsYmFjayBjYW4gYXNrIGZvciB1c2VyIGNvbmZpcm1hdGlvbiwgYW5kIGNhbmNlbCBvciBhbHRlciB0aGUgbmV3IFRyYW5zaXRpb24uICBUaGUgY2FsbGJhY2sgc2hvdWxkXG4gICAqIHJldHVybiBhIHZhbHVlLCBvciBhIHByb21pc2UgZm9yIGEgdmFsdWUuICBJZiBhIHByb21pc2UgaXMgcmV0dXJuZWQsIHRoZSBuZXcgVHJhbnNpdGlvbiB3YWl0cyB1bnRpbCB0aGVcbiAgICogcHJvbWlzZSBzZXR0bGVzLlxuICAgKlxuICAgKiBDYWxsZWQgd2hlbjpcbiAgICogLSBUaGUgY29tcG9uZW50IGlzIHN0aWxsIGFjdGl2ZSBpbnNpZGUgYSBgdWktdmlld2BcbiAgICogLSBBIG5ldyBUcmFuc2l0aW9uIGlzIGFib3V0IHRvIHJ1blxuICAgKiAtIFRoZSBuZXcgVHJhbnNpdGlvbiB3aWxsIGV4aXQgdGhlIHZpZXcncyBzdGF0ZVxuICAgKlxuICAgKiBDYWxsZWQgd2l0aDpcbiAgICogLSBUaGUgYFRyYW5zaXRpb25gIHRoYXQgaXMgYWJvdXQgdG8gZXhpdCB0aGUgY29tcG9uZW50J3Mgc3RhdGVcbiAgICpcbiAgICogIyMjIyBFeGFtcGxlOlxuICAgKiBgYGBqc1xuICAgKiBAQ29tcG9uZW50KHtcbiAgICogICB0ZW1wbGF0ZTogJzxpbnB1dCB0eXBlPVwidGV4dFwiPidcbiAgICogfSlcbiAgICogY2xhc3MgTXlDb21wb25lbnQge1xuICAgKiAgIGRpcnR5ID0gdHJ1ZTtcbiAgICpcbiAgICogICBjb25zdHJ1Y3RvcihwdWJsaWMgY29uZmlybVNlcnZpY2U6IGNvbmZpcm1TZXJ2aWNlKSB7XG4gICAqXG4gICAqICAgfVxuICAgKlxuICAgKiAgIHVpQ2FuRXhpdChuZXdUcmFuc2l0aW9uOiBUcmFuc2l0aW9uKSB7XG4gICAqICAgICBpZiAodGhpcy5kaXJ0eSAmJiBuZXdUcmFuc2l0aW9uLnRvKCkgIT09ICdsb2dvdXQnKSB7XG4gICAqICAgICAgIHJldHVybiB0aGlzLmNvbmZpcm1TZXJ2aWNlLmNvbmZpcm0oXCJFeGl0IHdpdGhvdXQgc2F2aW5nIGNoYW5nZXM/XCIpO1xuICAgKiAgICAgfVxuICAgKiAgIH1cbiAgICogfVxuICAgKiBgYGBcbiAgICpcbiAgICogQHJldHVybiBhIGhvb2sgcmVzdWx0IHdoaWNoIG1heSBjYW5jZWwgb3IgYWx0ZXIgdGhlIHBlbmRpbmcgVHJhbnNpdGlvbiAoc2VlIFtbSG9va1Jlc3VsdF1dKVxuICAgKi9cbiAgdWlDYW5FeGl0KG5ld1RyYW5zaXRpb24/OiBUcmFuc2l0aW9uKTogSG9va1Jlc3VsdDtcbn1cblxuLyoqXG4gKiBUaGUgc2hhcGUgb2YgYSBjb250cm9sbGVyIGZvciBhIHZpZXcgKGFuZC9vciBjb21wb25lbnQpLCBkZWZpbmluZyB0aGUgY29udHJvbGxlciBjYWxsYmFja3MuXG4gKlxuICogQSBVSS1Sb3V0ZXIgdmlldyBoYXMgYW4gQW5ndWxhciBgQ29tcG9uZW50YCAoc2VlIFtbTmcyVmlld0RlY2xhcmF0aW9uLmNvbXBvbmVudF1dKS5cbiAqIFRoZSBgQ29tcG9uZW50YCBtYXkgZGVmaW5lIGNvbXBvbmVudC1sZXZlbCBob29rcyB3aGljaCBVSS1Sb3V0ZXIgd2lsbCBjYWxsIGF0IHRoZSBhcHByb3ByaWF0ZSB0aW1lcy5cbiAqIFRoZXNlIGNhbGxiYWNrcyBhcmUgc2ltaWxhciB0byBUcmFuc2l0aW9uIEhvb2tzIChbW0lIb29rUmVnaXN0cnldXSksIGJ1dCBhcmUgb25seSBjYWxsZWQgaWYgdGhlIHZpZXcvY29tcG9uZW50IGlzIGN1cnJlbnRseSBhY3RpdmUuXG4gKlxuICogVGhpcyBpbnRlcmZhY2UgZGVmaW5lcyB0aGUgVUktUm91dGVyIGNvbXBvbmVudCBjYWxsYmFja3MuXG4gKlxuICogQGRlcHJlY2F0ZWQgVGhpcyBpbnRlcmZhY2UgaGFzIGJlZW4gcmVwbGFjZWQgYnkgVWlPbkV4aXQgYW5kIFVpT25QYXJhbXNDaGFuZ2VkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5nMkNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBUaGlzIGNhbGxiYWNrIGlzIGNhbGxlZCB3aGVuIHBhcmFtZXRlciB2YWx1ZXMgY2hhbmdlXG4gICAqXG4gICAqIFRoaXMgY2FsbGJhY2sgaXMgdXNlZCB0byByZXNwb25kIGR5bmFtaWMgcGFyYW1ldGVyIHZhbHVlcyBjaGFuZ2luZy5cbiAgICogSXQgaXMgY2FsbGVkIHdoZW4gYSB0cmFuc2l0aW9uIGNoYW5nZWQgb25lIG9yIG1vcmUgZHluYW1pYyBwYXJhbWV0ZXIgdmFsdWVzLFxuICAgKiBhbmQgdGhlIHJvdXRlZCBjb21wb25lbnQgd2FzIG5vdCBkZXN0cm95ZWQuXG4gICAqXG4gICAqIEl0IHJlY2VpdmVzIHR3byBwYXJhbWV0ZXJzOlxuICAgKlxuICAgKiAtIEFuIG9iamVjdCB3aXRoIChvbmx5KSBjaGFuZ2VkIHBhcmFtZXRlciB2YWx1ZXMuXG4gICAqICAgVGhlIGtleXMgYXJlIHRoZSBwYXJhbWV0ZXIgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBuZXcgcGFyYW1ldGVyIHZhbHVlcy5cbiAgICogLSBUaGUgW1tUcmFuc2l0aW9uXV0gd2hpY2ggY2hhbmdlZCB0aGUgcGFyYW1ldGVyIHZhbHVlcy5cbiAgICpcbiAgICogIyMjIyBFeGFtcGxlOlxuICAgKiBgYGBqc1xuICAgKiBAQ29tcG9uZW50KHtcbiAgICogICB0ZW1wbGF0ZTogJzxpbnB1dCB0eXBlPVwidGV4dFwiPidcbiAgICogfSlcbiAgICogY2xhc3MgTXlDb21wb25lbnQge1xuICAgKiAgIHVpT25QYXJhbXNDaGFuZ2VkKG5ld1BhcmFtczogeyBbcGFyYW1OYW1lOiBzdHJpbmddOiBhbnkgfSwgdHJhbnM6IFRyYW5zaXRpb24pIHtcbiAgICogICAgIE9iamVjdC5rZXlzKG5ld1BhcmFtcykuZm9yRWFjaChwYXJhbU5hbWUgPT4ge1xuICAgKiAgICAgICBjb25zb2xlLmxvZyhgJHtwYXJhbU5hbWV9IGNoYW5nZWQgdG8gJHtuZXdQYXJhbXNbcGFyYW1OYW1lXX1gKVxuICAgKiAgICAgfSk7XG4gICAqICAgfVxuICAgKiB9XG4gICAqIGBgYFxuICAgKi9cbiAgdWlPblBhcmFtc0NoYW5nZWQ/KG5ld1BhcmFtczogeyBbcGFyYW1OYW1lOiBzdHJpbmddOiBhbnkgfSwgdHJhbnM/OiBUcmFuc2l0aW9uKTogdm9pZDtcblxuICAvKipcbiAgICogVGhpcyBjYWxsYmFjayBpcyBjYWxsZWQgd2hlbiB0aGUgcm91dGVkIGNvbXBvbmVudCdzIHN0YXRlIGlzIGFib3V0IHRvIGJlIGV4aXRlZC5cbiAgICpcbiAgICogVGhlIGNhbGxiYWNrIGNhbiBiZSB1c2VkIHRvIGNhbmNlbCBvciBhbHRlciB0aGUgbmV3IFRyYW5zaXRpb24gdGhhdCB3b3VsZCBvdGhlcndpc2UgZXhpdCB0aGUgY29tcG9uZW50J3Mgc3RhdGUuXG4gICAqXG4gICAqIFRoaXMgY2FsbGJhY2sgaXMgdXNlZCB0byBpbmZvcm0gYSB2aWV3IHRoYXQgaXQgaXMgYWJvdXQgdG8gYmUgZXhpdGVkLCBkdWUgdG8gYSBuZXcgW1tUcmFuc2l0aW9uXV0uXG4gICAqIFRoZSBjYWxsYmFjayBjYW4gYXNrIGZvciB1c2VyIGNvbmZpcm1hdGlvbiwgYW5kIGNhbmNlbCBvciBhbHRlciB0aGUgbmV3IFRyYW5zaXRpb24uICBUaGUgY2FsbGJhY2sgc2hvdWxkXG4gICAqIHJldHVybiBhIHZhbHVlLCBvciBhIHByb21pc2UgZm9yIGEgdmFsdWUuICBJZiBhIHByb21pc2UgaXMgcmV0dXJuZWQsIHRoZSBuZXcgVHJhbnNpdGlvbiB3YWl0cyB1bnRpbCB0aGVcbiAgICogcHJvbWlzZSBzZXR0bGVzLlxuICAgKlxuICAgKiBDYWxsZWQgd2hlbjpcbiAgICogLSBUaGUgY29tcG9uZW50IGlzIHN0aWxsIGFjdGl2ZSBpbnNpZGUgYSBgdWktdmlld2BcbiAgICogLSBBIG5ldyBUcmFuc2l0aW9uIGlzIGFib3V0IHRvIHJ1blxuICAgKiAtIFRoZSBuZXcgVHJhbnNpdGlvbiB3aWxsIGV4aXQgdGhlIHZpZXcncyBzdGF0ZVxuICAgKlxuICAgKiBDYWxsZWQgd2l0aDpcbiAgICogLSBUaGUgYFRyYW5zaXRpb25gIHRoYXQgaXMgYWJvdXQgdG8gZXhpdCB0aGUgY29tcG9uZW50J3Mgc3RhdGVcbiAgICpcbiAgICogIyMjIyBFeGFtcGxlOlxuICAgKiBgYGBqc1xuICAgKiBAQ29tcG9uZW50KHtcbiAgICogICB0ZW1wbGF0ZTogJzxpbnB1dCB0eXBlPVwidGV4dFwiPidcbiAgICogfSlcbiAgICogY2xhc3MgTXlDb21wb25lbnQge1xuICAgKiAgIGRpcnR5ID0gdHJ1ZTtcbiAgICpcbiAgICogICBjb25zdHJ1Y3RvcihwdWJsaWMgY29uZmlybVNlcnZpY2U6IGNvbmZpcm1TZXJ2aWNlKSB7XG4gICAqXG4gICAqICAgfVxuICAgKlxuICAgKiAgIHVpQ2FuRXhpdChuZXdUcmFuc2l0aW9uOiBUcmFuc2l0aW9uKSB7XG4gICAqICAgICBpZiAodGhpcy5kaXJ0eSAmJiBuZXdUcmFuc2l0aW9uLnRvKCkgIT09ICdsb2dvdXQnKSB7XG4gICAqICAgICAgIHJldHVybiB0aGlzLmNvbmZpcm1TZXJ2aWNlLmNvbmZpcm0oXCJFeGl0IHdpdGhvdXQgc2F2aW5nIGNoYW5nZXM/XCIpO1xuICAgKiAgICAgfVxuICAgKiAgIH1cbiAgICogfVxuICAgKiBgYGBcbiAgICpcbiAgICogQHJldHVybiBhIGhvb2sgcmVzdWx0IHdoaWNoIG1heSBjYW5jZWwgb3IgYWx0ZXIgdGhlIHBlbmRpbmcgVHJhbnNpdGlvbiAoc2VlIFtbSG9va1Jlc3VsdF1dKVxuICAgKi9cbiAgdWlDYW5FeGl0PyhuZXdUcmFuc2l0aW9uPzogVHJhbnNpdGlvbik6IEhvb2tSZXN1bHQ7XG59XG4iXX0=