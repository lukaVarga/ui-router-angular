{"version":3,"file":"uiView.js","sourceRoot":"","sources":["../../src/directives/uiView.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  ComponentFactory,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport {\n  ActiveUIView,\n  filter,\n  inArray,\n  isFunction,\n  NATIVE_INJECTOR_TOKEN,\n  Param,\n  parse,\n  PathNode,\n  ResolveContext,\n  StateDeclaration,\n  trace,\n  Transition,\n  TransitionHookFn,\n  UIRouter,\n  unnestR,\n  ViewConfig,\n  ViewContext,\n} from '@uirouter/core';\nimport { Ng2ViewConfig } from '../statebuilders/views';\nimport { MergeInjector } from '../mergeInjector';\n\n/** @hidden */\nlet id = 0;\n\n/** @internal These are provide()d as the string UIView.PARENT_INJECT */\nexport interface ParentUIViewInject {\n  context: ViewContext;\n  fqn: string;\n}\n\n/** @internal */\ninterface InputMapping {\n  token: string;\n  prop: string;\n}\n\n/**\n * Given a component class, gets the inputs of styles:\n *\n * - @Input('foo') _foo\n * - `inputs: ['foo']`\n *\n * @internal\n */\nconst ng2ComponentInputs = (factory: ComponentFactory<any>): InputMapping[] => {\n  return factory.inputs.map((input) => ({ prop: input.propName, token: input.templateName }));\n};\n\n/**\n * A UI-Router viewport directive, which is filled in by a view (component) on a state.\n *\n * ### Selector\n *\n * A `ui-view` directive can be created as an element: `<ui-view></ui-view>` or as an attribute: `<div ui-view></div>`.\n *\n * ### Purpose\n *\n * This directive is used in a Component template (or as the root component) to create a viewport.  The viewport\n * is filled in by a view (as defined by a [[Ng2ViewDeclaration]] inside a [[Ng2StateDeclaration]]) when the view's\n * state has been activated.\n *\n * #### Example:\n * ```js\n * // This app has two states, 'foo' and 'bar'\n * stateRegistry.register({ name: 'foo', url: '/foo', component: FooComponent });\n * stateRegistry.register({ name: 'bar', url: '/bar', component: BarComponent });\n * ```\n * ```html\n * <!-- This ui-view will be filled in by the foo state's component or\n *      the bar state's component when the foo or bar state is activated -->\n * <ui-view></ui-view>\n * ```\n *\n * ### Named ui-views\n *\n * A `ui-view` may optionally be given a name via the attribute value: `<div ui-view='header'></div>`.  *Note:\n * an unnamed `ui-view` is internally named `$default`*.   When a `ui-view` has a name, it will be filled in\n * by a matching named view.\n *\n * #### Example:\n * ```js\n * stateRegistry.register({\n *   name: 'foo',\n *   url: '/foo',\n *   views: { header: HeaderComponent, $default: FooComponent });\n * ```\n * ```html\n * <!-- When 'foo' state is active, filled by HeaderComponent -->\n * <div ui-view=\"header\"></div>\n *\n * <!-- When 'foo' state is active, filled by FooComponent -->\n * <ui-view></ui-view>\n * ```\n */\n@Component({\n  selector: 'ui-view, [ui-view]',\n  exportAs: 'uiView',\n  template: `\n    <ng-template #componentTarget></ng-template>\n    <ng-content *ngIf=\"!_componentRef\"></ng-content>\n  `,\n})\nexport class UIView implements OnInit, OnDestroy {\n  static PARENT_INJECT = 'UIView.PARENT_INJECT';\n\n  @ViewChild('componentTarget', { read: ViewContainerRef, static: true })\n  _componentTarget: ViewContainerRef;\n  @Input('name') name: string;\n\n  @Input('ui-view')\n  set _name(val: string) {\n    this.name = val;\n  }\n\n  /** The reference to the component currently inside the viewport */\n  _componentRef: ComponentRef<any>;\n  /** Deregisters the ui-view from the view service */\n  private _deregisterUIView: Function;\n  /** Deregisters the master uiCanExit transition hook */\n  private _deregisterUiCanExitHook: Function;\n  /** Deregisters the master uiOnParamsChanged transition hook */\n  private _deregisterUiOnParamsChangedHook: Function;\n  /** Data about the this UIView */\n  private _uiViewData: ActiveUIView = <any>{};\n  private _parent: ParentUIViewInject;\n\n  constructor(\n    public router: UIRouter,\n    @Inject(UIView.PARENT_INJECT) parent,\n    public viewContainerRef: ViewContainerRef\n  ) {\n    this._parent = parent;\n  }\n\n  /**\n   * @returns the UI-Router `state` that is filling this uiView, or `undefined`.\n   */\n  public get state(): StateDeclaration {\n    return parse('_uiViewData.config.viewDecl.$context.self')(this);\n  }\n\n  ngOnInit() {\n    const router = this.router;\n    const parentFqn = this._parent.fqn;\n    const name = this.name || '$default';\n\n    this._uiViewData = {\n      $type: 'ng2',\n      id: id++,\n      name: name,\n      fqn: parentFqn ? parentFqn + '.' + name : name,\n      creationContext: this._parent.context,\n      configUpdated: this._viewConfigUpdated.bind(this),\n      config: undefined,\n    };\n\n    this._deregisterUiCanExitHook = router.transitionService.onBefore({}, (trans) => {\n      return this._invokeUiCanExitHook(trans);\n    });\n\n    this._deregisterUiOnParamsChangedHook = router.transitionService.onSuccess({}, (trans) =>\n      this._invokeUiOnParamsChangedHook(trans)\n    );\n\n    this._deregisterUIView = router.viewService.registerUIView(this._uiViewData);\n  }\n\n  /**\n   * For each transition, checks the component loaded in the ui-view for:\n   *\n   * - has a uiCanExit() component hook\n   * - is being exited\n   *\n   * If both are true, adds the uiCanExit component function as a hook to that singular Transition.\n   */\n  private _invokeUiCanExitHook(trans: Transition) {\n    const instance = this._componentRef && this._componentRef.instance;\n    const uiCanExitFn: TransitionHookFn = instance && instance.uiCanExit;\n\n    if (isFunction(uiCanExitFn)) {\n      const state: StateDeclaration = this.state;\n\n      if (trans.exiting().indexOf(state) !== -1) {\n        trans.onStart({}, function () {\n          return uiCanExitFn.call(instance, trans);\n        });\n      }\n    }\n  }\n\n  /**\n   * For each transition, checks if any param values changed and notify component\n   */\n  private _invokeUiOnParamsChangedHook($transition$: Transition) {\n    const instance = this._componentRef && this._componentRef.instance;\n    const uiOnParamsChanged: TransitionHookFn = instance && instance.uiOnParamsChanged;\n\n    if (isFunction(uiOnParamsChanged)) {\n      const viewState: StateDeclaration = this.state;\n      const resolveContext: ResolveContext = new ResolveContext(this._uiViewData.config.path);\n      const viewCreationTrans = resolveContext.getResolvable('$transition$').data;\n\n      // Exit early if the $transition$ is the same as the view was created within.\n      // Exit early if the $transition$ will exit the state the view is for.\n      if ($transition$ === viewCreationTrans || $transition$.exiting().indexOf(viewState as StateDeclaration) !== -1)\n        return;\n\n      const toParams: { [paramName: string]: any } = $transition$.params('to');\n      const fromParams: { [paramName: string]: any } = $transition$.params('from');\n      const getNodeSchema = (node: PathNode) => node.paramSchema;\n      const toSchema: Param[] = $transition$.treeChanges('to').map(getNodeSchema).reduce(unnestR, []);\n      const fromSchema: Param[] = $transition$.treeChanges('from').map(getNodeSchema).reduce(unnestR, []);\n\n      // Find the to params that have different values than the from params\n      const changedToParams = toSchema.filter((param: Param) => {\n        const idx = fromSchema.indexOf(param);\n        return idx === -1 || !fromSchema[idx].type.equals(toParams[param.id], fromParams[param.id]);\n      });\n\n      // Only trigger callback if a to param has changed or is new\n      if (changedToParams.length) {\n        const changedKeys: string[] = changedToParams.map((x) => x.id);\n        // Filter the params to only changed/new to params.  `$transition$.params()` may be used to get all params.\n        const newValues = filter(toParams, (val, key) => changedKeys.indexOf(key) !== -1);\n        instance.uiOnParamsChanged(newValues, $transition$);\n      }\n    }\n  }\n\n  private _disposeLast() {\n    if (this._componentRef) this._componentRef.destroy();\n    this._componentRef = null;\n  }\n\n  ngOnDestroy() {\n    if (this._deregisterUIView) this._deregisterUIView();\n    if (this._deregisterUiCanExitHook) this._deregisterUiCanExitHook();\n    if (this._deregisterUiOnParamsChangedHook) this._deregisterUiOnParamsChangedHook();\n    this._deregisterUIView = this._deregisterUiCanExitHook = this._deregisterUiOnParamsChangedHook = null;\n    this._disposeLast();\n  }\n\n  /**\n   * The view service is informing us of an updated ViewConfig\n   * (usually because a transition activated some state and its views)\n   */\n  _viewConfigUpdated(config: ViewConfig) {\n    // The config may be undefined if there is nothing currently targeting this UIView.\n    // Dispose the current component, if there is one\n    if (!config) return this._disposeLast();\n\n    // Only care about Ng2 configs\n    if (!(config instanceof Ng2ViewConfig)) return;\n\n    // The \"new\" viewconfig is already applied, so exit early\n    if (this._uiViewData.config === config) return;\n\n    // This is a new ViewConfig.  Dispose the previous component\n    this._disposeLast();\n    trace.traceUIViewConfigUpdated(this._uiViewData, config && config.viewDecl.$context);\n\n    this._applyUpdatedConfig(config);\n\n    // Initiate change detection for the newly created component\n    this._componentRef.changeDetectorRef.markForCheck();\n  }\n\n  private _applyUpdatedConfig(config: Ng2ViewConfig) {\n    this._uiViewData.config = config;\n    // Create the Injector for the routed component\n    const context = new ResolveContext(config.path);\n    const componentInjector = this._getComponentInjector(context);\n\n    // Get the component class from the view declaration. TODO: allow promises?\n    const componentClass = config.viewDecl.component;\n\n    // Create the component\n    const compFactoryResolver = componentInjector.get(ComponentFactoryResolver);\n    const compFactory = compFactoryResolver.resolveComponentFactory(componentClass);\n    this._componentRef = this._componentTarget.createComponent(compFactory, undefined, componentInjector);\n\n    // Wire resolves to @Input()s\n    this._applyInputBindings(compFactory, this._componentRef.instance, context, componentClass);\n  }\n\n  /**\n   * Creates a new Injector for a routed component.\n   *\n   * Adds resolve values to the Injector\n   * Adds providers from the NgModule for the state\n   * Adds providers from the parent Component in the component tree\n   * Adds a PARENT_INJECT view context object\n   *\n   * @returns an Injector\n   */\n  private _getComponentInjector(context: ResolveContext): Injector {\n    // Map resolves to \"useValue: providers\"\n    const resolvables = context\n      .getTokens()\n      .map((token) => context.getResolvable(token))\n      .filter((r) => r.resolved);\n\n    const newProviders = resolvables.map((r) => ({ provide: r.token, useValue: context.injector().get(r.token) }));\n\n    const parentInject = { context: this._uiViewData.config.viewDecl.$context, fqn: this._uiViewData.fqn };\n    newProviders.push({ provide: UIView.PARENT_INJECT, useValue: parentInject });\n\n    const parentComponentInjector = this.viewContainerRef.injector;\n    const moduleInjector = context.getResolvable(NATIVE_INJECTOR_TOKEN).data;\n    const mergedParentInjector = new MergeInjector(moduleInjector, parentComponentInjector);\n\n    return Injector.create(newProviders, mergedParentInjector);\n  }\n\n  /**\n   * Supplies component inputs with resolve data\n   *\n   * Finds component inputs which match resolves (by name) and sets the input value\n   * to the resolve data.\n   */\n  private _applyInputBindings(factory: ComponentFactory<any>, component: any, context: ResolveContext, componentClass) {\n    const bindings = this._uiViewData.config.viewDecl['bindings'] || {};\n    const explicitBoundProps = Object.keys(bindings);\n\n    // Returns the actual component property for a renamed an input renamed using `@Input('foo') _foo`.\n    // return the `_foo` property\n    const renamedInputProp = (prop: string) => {\n      const input = factory.inputs.find((i) => i.templateName === prop);\n      return (input && input.propName) || prop;\n    };\n\n    // Supply resolve data to component as specified in the state's `bindings: {}`\n    const explicitInputTuples = explicitBoundProps.reduce(\n      (acc, key) => acc.concat([{ prop: renamedInputProp(key), token: bindings[key] }]),\n      []\n    );\n\n    // Supply resolve data to matching @Input('prop') or inputs: ['prop']\n    const implicitInputTuples = ng2ComponentInputs(factory).filter((tuple) => !inArray(explicitBoundProps, tuple.prop));\n\n    const addResolvable = (tuple: InputMapping) => ({\n      prop: tuple.prop,\n      resolvable: context.getResolvable(tuple.token),\n    });\n\n    const injector = context.injector();\n\n    explicitInputTuples\n      .concat(implicitInputTuples)\n      .map(addResolvable)\n      .filter((tuple) => tuple.resolvable && tuple.resolvable.resolved)\n      .forEach((tuple) => {\n        component[tuple.prop] = injector.get(tuple.resolvable.token);\n      });\n  }\n}\n"]}