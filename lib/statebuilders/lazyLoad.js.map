{"version":3,"file":"lazyLoad.js","sourceRoot":"","sources":["../../src/statebuilders/lazyLoad.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AAE5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0CG;AACH,MAAM,UAAU,kBAAkB,CAAC,KAAkB,EAAE,MAAuB;IAC5E,IAAM,cAAc,GAAG,KAAK,CAAC,cAAc,CAAC,CAAC;IAC7C,OAAO,cAAc,CAAC,CAAC,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC;AACxE,CAAC","sourcesContent":["import { LazyLoadResult, Transition, StateDeclaration } from '@uirouter/core'; // has or is using\nimport { BuilderFunction, StateObject } from '@uirouter/core';\nimport { loadNgModule } from '../lazyLoad/lazyLoadNgModule';\n\n/**\n * This is a [[StateBuilder.builder]] function for ngModule lazy loading in Angular.\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * decorates the `lazyLoad` property for states that have a [[Ng2StateDeclaration.ngModule]] declaration.\n *\n * If the state has a [[Ng2StateDeclaration.ngModule]], it will create a `lazyLoad` function\n * that in turn calls `loadNgModule(loadNgModuleFn)`.\n *\n * #### Example:\n * A state that has a `ngModule`\n * ```js\n * var decl = {\n *   ngModule: () => import('./childModule.ts')\n * }\n * ```\n * would build a state with a `lazyLoad` function like:\n * ```js\n * import { loadNgModule } from \"@uirouter/angular\";\n * var decl = {\n *   lazyLoad: loadNgModule(() => import('./childModule.ts')\n * }\n * ```\n *\n * If the state has both a `ngModule:` *and* a `lazyLoad`, then the `lazyLoad` is run first.\n *\n * #### Example:\n * ```js\n * var decl = {\n *   lazyLoad: () => import('third-party-library'),\n *   ngModule: () => import('./childModule.ts')\n * }\n * ```\n * would build a state with a `lazyLoad` function like:\n * ```js\n * import { loadNgModule } from \"@uirouter/angular\";\n * var decl = {\n *   lazyLoad: () => import('third-party-library')\n *       .then(() => loadNgModule(() => import('./childModule.ts'))\n * }\n * ```\n *\n */\nexport function ng2LazyLoadBuilder(state: StateObject, parent: BuilderFunction) {\n  const loadNgModuleFn = state['loadChildren'];\n  return loadNgModuleFn ? loadNgModule(loadNgModuleFn) : state.lazyLoad;\n}\n"]}