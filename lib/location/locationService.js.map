{"version":3,"file":"locationService.js","sourceRoot":"","sources":["../../src/location/locationService.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,oBAAoB,EAAE,QAAQ,EAAY,MAAM,gBAAgB,CAAC;AAG1E,0EAA0E;AAC1E;IAAyC,uCAAoB;IAC3D,6BAAY,MAAgB,EAAU,iBAAmC,EAAE,SAAkB;QAC3F,YAAA,MAAK,YAAC,MAAM,EAAE,SAAS,CAAC,SAAC;QADW,uBAAiB,GAAjB,iBAAiB,CAAkB;QAGvE,KAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,UAAC,GAAG;YACpC,IAAI,GAAG,CAAC,IAAI,KAAK,YAAY,EAAE,CAAC;gBAC9B,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YACtB,CAAC;QACH,CAAC,CAAC,CAAC;;IACL,CAAC;IAED,kCAAI,GAAJ;QACE,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAChH,CAAC;IAED,kCAAI,GAAJ,UAAK,KAAU,EAAE,KAAa,EAAE,GAAW,EAAE,OAAgB;QACrD,IAAA,KAAyB,QAAQ,CAAC,GAAG,CAAC,EAApC,IAAI,UAAA,EAAE,MAAM,YAAA,EAAE,IAAI,UAAkB,CAAC;QAE7C,IAAM,cAAc,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;QAC9C,IAAI,OAAO,GAAG,IAAI,CAAC;QACnB,IAAI,SAAS,GAAG,MAAM,CAAC;QAEvB,IAAI,MAAM,EAAE,CAAC;YACX,SAAS,IAAI,cAAc,CAAC;QAC9B,CAAC;aAAM,CAAC;YACN,OAAO,IAAI,cAAc,CAAC;QAC5B,CAAC;QAED,IAAI,OAAO,EAAE,CAAC;YACZ,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;QACxE,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;QACrE,CAAC;IACH,CAAC;IAED,qCAAO,GAAP,UAAQ,MAAgB;QACtB,gBAAK,CAAC,OAAO,YAAC,MAAM,CAAC,CAAC;IACxB,CAAC;IACH,0BAAC;AAAD,CAAC,AAtCD,CAAyC,oBAAoB,GAsC5D","sourcesContent":["import { BaseLocationServices, parseUrl, UIRouter } from '@uirouter/core';\nimport { LocationStrategy } from '@angular/common';\n\n/** A `LocationServices` that delegates to the Angular LocationStrategy */\nexport class Ng2LocationServices extends BaseLocationServices {\n  constructor(router: UIRouter, private _locationStrategy: LocationStrategy, isBrowser: boolean) {\n    super(router, isBrowser);\n\n    this._locationStrategy.onPopState((evt) => {\n      if (evt.type !== 'hashchange') {\n        this._listener(evt);\n      }\n    });\n  }\n\n  _get() {\n    return this._locationStrategy.path(true).replace(this._locationStrategy.getBaseHref().replace(/\\/$/, ''), '');\n  }\n\n  _set(state: any, title: string, url: string, replace: boolean): any {\n    const { path, search, hash } = parseUrl(url);\n\n    const hashWithPrefix = hash ? '#' + hash : '';\n    let urlPath = path;\n    let urlParams = search;\n\n    if (search) {\n      urlParams += hashWithPrefix;\n    } else {\n      urlPath += hashWithPrefix;\n    }\n\n    if (replace) {\n      this._locationStrategy.replaceState(state, title, urlPath, urlParams);\n    } else {\n      this._locationStrategy.pushState(state, title, urlPath, urlParams);\n    }\n  }\n\n  dispose(router: UIRouter) {\n    super.dispose(router);\n  }\n}\n"]}